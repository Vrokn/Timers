{"version":3,"sources":["Components/Contador.js","Components/Timer.js","Components/Form.js","Components/Update.js","App.js","serviceWorker.js","index.js"],"names":["pad","numberString","size","padded","length","Timer","title","project","handleStart","handleStop","toggleUpdate","handleDelete","elapsedSeconds","Card","centered","Content","textAlign","Header","Meta","Divider","Description","s","ms","seconds","Math","floor","minutes","toString","join","millisecondsToHuman","Icon","link","name","onClick","extra","Button","attached","animated","inverted","color","visible","hidden","NewTimer","addTimer","toggleForm","fluid","stretched","Form","onSubmit","Field","placeholder","className","type","Update","handleUpdate","handleNewProjectField","handleNewNameField","onChange","App","props","id","index","state","timers","findIndex","timer","_this","intervals","setInterval","setState","map","i","clearInterval","filter","newName","newProject","event","preventDefault","this","target","value","updating","Title","Project","ids","task","newTimer","max","apply","reset","class","Grid","Column","mobile","tablet","computer","Group","itemsPerRow","item","key","bind","fitted","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7935ccd.chunk.js","sourcesContent":["export default function millisecondsToHuman(s) {\r\n  let ms = s * 1000\r\n  const seconds = Math.floor((ms / 1000) % 60);\r\n  const minutes = Math.floor((ms / 1000 / 60) % 60);\r\n  const hours = Math.floor(ms / 1000 / 60 / 60);\r\n\r\n  const humanized = [\r\n    pad(hours.toString(), 2),\r\n    pad(minutes.toString(), 2),\r\n    pad(seconds.toString(), 2),\r\n  ].join(':');\r\n\r\n  return humanized;\r\n}\r\nfunction pad(numberString, size) {\r\n  let padded = numberString;\r\n  while (padded.length < size) padded = `0${padded}`;\r\n  return padded;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Card, Icon, Button, Divider, } from 'semantic-ui-react';\r\nimport millisecondsToHuman from './Contador'\r\n\r\n\r\nexport default function Timer({ title, project, handleStart, handleStop, toggleUpdate, handleDelete, elapsedSeconds, }) {\r\n\r\n    return (\r\n        <Card centered >\r\n            <Card.Content textAlign='center' >\r\n                <Card.Header>{title}</Card.Header>\r\n                <Card.Meta>{project}</Card.Meta>\r\n                <Divider />\r\n                <Card.Description textAlign='center'>\r\n                    <h2>{millisecondsToHuman(elapsedSeconds)}</h2>\r\n                </Card.Description>\r\n                <Icon link name='edit' onClick={toggleUpdate} />\r\n                <Icon link name='trash' onClick={handleDelete} />\r\n            </Card.Content>\r\n            <Card.Content extra >\r\n                <Button attached animated onClick={handleStart} inverted color='green' >\r\n                    <Button.Content visible>Start</Button.Content>\r\n                    <Button.Content hidden>\r\n                        <Icon name='play' />\r\n                    </Button.Content>\r\n                </Button>\r\n                <Button animated attached onClick={handleStop} inverted color='red' >\r\n                    <Button.Content visible>Stop</Button.Content>\r\n                    <Button.Content hidden>\r\n                        <Icon name='stop' />\r\n                    </Button.Content>\r\n                </Button>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}","import React from \"react\";\r\nimport { Card, Button, Form } from 'semantic-ui-react';\r\n\r\nexport default function NewTimer({ addTimer, toggleForm }) {\r\n\r\n    return (\r\n        <Card centered fluid={false} stretched >\r\n            <Card.Content>\r\n                <Form onSubmit={addTimer}>\r\n                    <Form.Field>\r\n                        <label>Title</label>\r\n                        <input placeholder='Title' name='Title' />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Project</label>\r\n                        <input placeholder='Project' name='Project' />\r\n                    </Form.Field>\r\n                    <div className='ui two buttons'>\r\n                        <Button inverted color='green' type='submit'>Create</Button>\r\n                        <Button inverted color='red' onClick={toggleForm}>Cancel</Button>\r\n                    </div>\r\n                </Form>\r\n            </Card.Content>\r\n        </Card >\r\n    );\r\n}","import React from \"react\";\r\nimport { Card, Button, Form } from 'semantic-ui-react';\r\n\r\nexport default function Update({ title, project, handleUpdate, toggleUpdate, handleNewProjectField, handleNewNameField  }) {\r\n\r\n    return (\r\n        <Card centered fluid={false} stretched >\r\n            <Card.Content>\r\n                <Form >\r\n                    <Form.Field>\r\n                        <label>New Title</label>\r\n                        <input placeholder={title} name='newTitle' onChange={handleNewNameField}/>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>New Project</label>\r\n                        <input placeholder={project} name='newProject' onChange={handleNewProjectField}/>\r\n                    </Form.Field>\r\n                    <div className='ui two buttons'>\r\n                        <Button inverted color='green' onClick={handleUpdate}>Update</Button>\r\n                        <Button inverted color='red' onClick={toggleUpdate}>Cancel</Button>\r\n                    </div>\r\n                </Form>\r\n            </Card.Content>\r\n        </Card >\r\n    );\r\n}","import React from 'react';\nimport { Button, Icon, Card, Grid } from 'semantic-ui-react';\nimport Timer from \"./Components/Timer\";\nimport NewTimer from \"./Components/Form\";\nimport Update from \"./Components/Update\";\nimport { Component } from \"react\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      timers: [],\n      visible: false,\n      newName: '',\n      newProject: '',\n    }\n    this.intervals = [];\n  }\n  handleStart = (id) => {\n    const index = this.state.timers.findIndex(timer =>\n      timer.id === id)\n    let _this = this;\n    if (!this.intervals[index]) {\n      this.intervals[index] = setInterval(function () {\n        _this.setState({\n          timers: _this.state.timers.map((timer, i) => {\n            if (index === i) {\n              timer.elapsedSeconds += 1;\n            }\n            return timer;\n          })\n        });\n      }, 1000);\n    }\n  }\n  handleStop = (id) => {\n    let timers = this.state.timers\n    const index = timers.findIndex(timer =>\n      timer.id === id)\n    clearInterval(this.intervals[index]);\n    this.intervals[index] = null;\n  }\n  handleDelete = (id) => {\n    const index = this.state.timers.findIndex(timer =>\n      timer.id === id)\n    this.setState({ timers: this.state.timers.filter((timer, i) => index !== i) })\n  }\n  handleNewNameField(event) {\n    event.preventDefault();\n    this.setState({ newName: event.target.value });\n  }\n  handleNewProjectField(event) {\n    event.preventDefault();\n    this.setState({ newProject: event.target.value });\n  }\n  handleUpdate(id) {\n    const index = this.state.timers.findIndex(timer =>\n      timer.id === id)\n    this.setState({\n      timers: this.state.timers.map((timer, i) => {\n        if (index === i) {\n          timer.title = this.state.newName;\n          timer.project = this.state.newProject;\n          timer.updating = !timer.updating;\n        }\n        return timer;\n      })\n    })\n  }\n  addTimer(event) {\n    event.preventDefault()\n    const Title = event.target['Title'].value\n    const Project = event.target['Project'].value\n    const ids = this.state.timers.map(task => task.id);\n    const max = Math.max(Math.max.apply(Math, ids), 0);\n    const newTimer = {\n      id: max + 1,\n      title: Title,\n      project: Project,\n      elapsedSeconds: 0,\n      updating: false,\n    }\n    this.setState({\n      timers: [...this.state.timers, newTimer],\n      visible: false,\n    });\n    event.target.reset()\n  }\n  toggleUpdate(id) {\n    const index = this.state.timers.findIndex(timer =>\n      timer.id === id);\n    this.setState({\n      timers: this.state.timers.map((timer, i) => {\n        if (index === i) {\n          timer.updating = !timer.updating;\n        }\n        return timer;\n      })\n    });\n  }\n  toggleForm() {\n    this.setState({ visible: (!this.state.visible) });\n  }\n  render() {\n    const { state, handleStart, handleUpdate, handleStop, toggleUpdate,\n      handleDelete, toggleForm, addTimer, handleNewProjectField, handleNewNameField } = this;\n    const { timers } = state;\n    return (\n      <div className=\"App\">\n        <br></br>\n        <h1 class=\"ui dividing centered header\">Stopwatches</h1>\n        <Grid centered >\n          <Grid.Column mobile={12} tablet={6} computer={5}>\n            <Card.Group itemsPerRow={1}>\n              {timers.map(item =>\n                item.updating ? <Update\n                  key={item.id}\n                  title={item.title}\n                  project={item.project}\n                  handleNewNameField={handleNewNameField.bind(this)}\n                  handleNewProjectField={handleNewProjectField.bind(this)}\n                  handleUpdate={handleUpdate.bind(this, item.id)}\n                  toggleUpdate={toggleUpdate.bind(this, item.id)} /> :\n                  <Timer\n                    key={item.id}\n                    elapsedSeconds={item.elapsedSeconds}\n                    title={item.title}\n                    project={item.project}\n                    updating={item.updating}\n                    handleStart={handleStart.bind(this, item.id)}\n                    handleStop={handleStop.bind(this, item.id)}\n                    handleDelete={handleDelete.bind(this, item.id)}\n                    toggleUpdate={toggleUpdate.bind(this, item.id)}\n                  />\n              )}\n              <br></br>\n              {this.state.visible ? <NewTimer addTimer={addTimer.bind(this)} toggleForm={toggleForm.bind(this)} /> : null}\n            </Card.Group>\n            <br></br>\n          </Grid.Column>\n        </Grid>\n        <Button onClick={toggleForm.bind(this)}><Icon fitted name='plus' /></Button>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}